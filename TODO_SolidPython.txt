-- README needs a table of contents with #hash links
-- bill_of_materials() entries should be left-justified in their columns.
-- Comprehensive docs
-- Applescript or other inter-app communication that will recompile in OpenSCAD
    whenever requested via your Python code
-- Debugging info?  This isn't really present for SCAD, so it's hard from Python.
-- Programmatic way to designate parameters users might want to change
-- Gui for setting parameters - sliders, dropdowns, etc.  Well... that's a separate project.
-- Some way to interrogate objects about their shape.  bounding_box() for all
    openscad objects? With that in place, you could do things like "move piece 
    A up so its northern edge lines up with object B's northern edge."
-- Some way to split an object into two shapes as if it's been cut. The way
    I go about that is to intersect an object with two different shapes, and
    then move those results around.  It would be nice if this were more 
    automatic. -ETJ 07 Jul 2012         
-- Current practice prevents any re-use of the SCAD code generated.  A Python
    function called a hundred times will compile to 100 separate lists of SCAD
    code, rather than 100 calls to a function, which makes the SCAD code larger
    than necessary and harder to read.  It would be nice if Python functions
    were compiled to SCAD functions somehow.  Haven't figured out how to make
    this work yet. -ETJ 29 Aug 2012


Completed:    
-- More robust screw threads -- lead-in, lead-out, and cross-sectional support
-- Add handling for the #*!% SCAD characters (debug, disable, root, background) -ETJ 15 Feb 2011
-- Improving syntax so it's as close as possible to OpenSCAD's -ETJ 15 Feb 2011
-- By default, let polygon assume that connectivity between specified points (the paths argument) is
    in the order specified in the points array.  Without this, there's always 
    boilerplate: polygon( points=arr, paths= range(len(arr)))
-- Add 'segments' arguments to circle(), sphere() and cylinder()? This breaks 
    with OpenSCAD, but is simpler than circle(10).add_param('$fn', 30)    
-- Unit testing.
-- setup.py should include PyPi-required metadata.
-- Add to PyPI so SolidPython can be installed with pip install solidpython
-- Update README with PyEuclid information and PyPI-aware install info
    